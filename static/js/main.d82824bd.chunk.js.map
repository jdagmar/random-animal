{"version":3,"sources":["State.tsx","css/breakpoints.ts","components/Button.tsx","components/ButtonGroup.tsx","components/Card.tsx","components/Header.tsx","components/MainContent.tsx","API/animal.ts","App.tsx","index.tsx"],"names":["gotAnimalResponseAction","res","type","payload","animalRequestedAction","initState","currentAnimal","tag","reducer","state","action","response","reason","url","size","device","xs","sm","md","lg","xl","xxl","FilledButton","styled","button","Button","props","onClick","animalType","text","InlineButtonGroup","div","ButtonGroup","children","mediaSizeSm","mediaSizeMd","Image","img","MediaWrapper","Paragraph","p","shimmer","keyframes","Skeleton","Card","animal","height","width","controls","src","alt","getCardContent","HeaderContainer","HeaderContent","header","MainHeading","h1","Preamble","Header","Main","main","process","MainContent","getCat","fetch","then","json","data","succeededResponse","file","catch","responseFailed","getDog","endsWith","TextContent","App","useReducer","dispatch","useEffect","requestAnimal","useCallback","AnimalApi","onload","onerror","GlobalStyles","createGlobalStyle","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.d82824bd.chunk.js","sourcesContent":["import { AnimalResponse } from './API/animal';\n\nexport type Action = GotAnimalResponseAction | AnimalRequstedAction;\n\nexport type GotAnimalResponseAction = {\n  type: 'gotAnimalResponse';\n  payload: AnimalResponse;\n};\n\ntype AnimalRequstedAction = {\n  type: 'animalRequested';\n};\n\nexport const gotAnimalResponseAction = (\n  res: AnimalResponse\n): GotAnimalResponseAction => ({ type: 'gotAnimalResponse', payload: res });\n\nexport const animalRequestedAction: AnimalRequstedAction = {\n  type: 'animalRequested',\n};\n\nexport type Animal =\n  | {\n      tag: 'got animal';\n      url: string;\n      type: 'video' | 'image';\n    }\n  | { tag: 'waiting' }\n  | { tag: 'placeholder' }\n  | { tag: 'fail'; reason: string };\n\nexport type State = {\n  currentAnimal: Animal;\n};\n\nexport const initState: State = {\n  currentAnimal: { tag: 'placeholder' },\n};\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case 'gotAnimalResponse':\n      if (action.payload.response === 'fail') {\n        return {\n          ...state,\n          currentAnimal: {\n            tag: 'fail',\n            reason: action.payload.reason,\n          },\n        };\n      } else {\n        return {\n          ...state,\n          currentAnimal: {\n            tag: 'got animal',\n            url: action.payload.url,\n            type: action.payload.tag,\n          },\n        };\n      }\n    case 'animalRequested':\n      return {\n        ...state,\n        currentAnimal: {\n          tag: 'waiting',\n        },\n      };\n  }\n};\n","export const size = {\n  xs: '320px',\n  sm: '640px',\n  md: '768px',\n  lg: '1024px',\n  xl: '1280px',\n  xxl: '1536px',\n\n }\n \n export const device = {\n  xs: `(min-width: ${size.xs})`,\n  sm: `(min-width: ${size.sm})`,\n  md: `(min-width: ${size.md})`,\n  lg: `(min-width: ${size.lg})`,\n  xl: `(min-width: ${size.xl})`,\n  xxl: `(min-width: ${size.xxl})`,\n }","import React from 'react';\nimport styled from 'styled-components';\nimport { AnimalType } from '../API/animal';\nimport { device } from '../css/breakpoints';\n\ntype Props = {\n  animalType: AnimalType;\n  onClick: (animalType: AnimalType) => void;\n  text: string;\n};\n\nconst FilledButton = styled.button`\n  cursor: pointer;\n  background-color: #db6400;\n  color: #181a18;\n  border: none;\n  padding: 0.5rem 1rem;\n  margin: 0.5rem;\n  letter-spacing: 1px;\n  font-size: 1.2rem;\n  font-family: inherit;\n  border-radius: 0.25rem;\n\n  @media only screen and ${device.md}{\n    padding: 0.7rem 1.6rem;\n  }\n\n    &:hover {\n      background-color: #ffa62b;\n      transition: background-color 500ms ease-in-out;\n    }\n  }\n`;\n\nexport const Button = (props: Props) => {\n  return (\n    <div>\n      <FilledButton onClick={() => props.onClick(props.animalType)}>\n        {props.text}\n      </FilledButton>\n    </div>\n  );\n};\n","import React, { ReactNode } from 'react';\nimport styled from 'styled-components';\n\ntype Props = {\n  children: ReactNode;\n};\n\nconst InlineButtonGroup = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n  margin-bottom: 2rem;\n  margin-top: 2rem;\n  position: relative;\n  z-index: 3;\n`;\n\nexport const ButtonGroup = (props: Props) => {\n  return <InlineButtonGroup>{props.children}</InlineButtonGroup>;\n};\n","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { device } from '../css/breakpoints';\nimport { Animal } from '../State';\n\ntype Props = {\n  animal: Animal;\n};\n\nconst mediaSizeSm = '250px';\nconst mediaSizeMd = '350px';\n\nconst Image = styled.img`\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  border-radius: 0.25rem;\n`;\n\nconst MediaWrapper = styled.div`\n  position: relative;\n  z-index: 3;\n\n  width: ${mediaSizeSm};\n  height: ${mediaSizeSm};\n\n  @media only screen and ${device.md} {\n    width: ${mediaSizeMd};\n    height: ${mediaSizeMd};\n  }\n`;\n\nconst Paragraph = styled.p`\n  color: #ffffff;\n  font-size: 1.3rem;\n`;\n\nconst shimmer = keyframes`\n  100% {\n    transform: translateX(100%);\n  }\n`;\n\nconst Skeleton = styled.div`\n  position: relative;\n  z-index: 3;\n  overflow: hidden;\n  background-color: #dddbdd;\n  border-radius: 0.25rem;\n  width: ${mediaSizeSm};\n  height: ${mediaSizeSm};\n\n  @media only screen and ${device.md} {\n    width: ${mediaSizeMd};\n    height: ${mediaSizeMd};\n  }\n\n  &:after {\n    content: '';\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    transform: translateX(-100%);\n    background-image: linear-gradient(\n      90deg,\n      rgba(255, 255, 255, 0) 0,\n      rgba(255, 255, 255, 0.2) 20%,\n      rgba(255, 255, 255, 0.5) 60%,\n      rgba(255, 255, 255, 0)\n    );\n    animation: ${shimmer} 2s infinite;\n  }\n`;\n\nexport const Card = (props: Props) => {\n  const getCardContent = () => {\n    switch (props.animal.tag) {\n      case 'got animal':\n        return props.animal.type === 'video' ? (\n          <MediaWrapper>\n            <video height=\"100%\" width=\"100%\" controls>\n              <source src={props.animal.url} type=\"video/mp4\" />\n            </video>\n          </MediaWrapper>\n        ) : (\n          <MediaWrapper>\n            <Image src={props.animal.url} alt=\"\" />\n          </MediaWrapper>\n        );\n      case 'fail':\n        return <Paragraph>{props.animal.reason}</Paragraph>;\n\n      case 'waiting':\n        return <Skeleton></Skeleton>;\n    }\n  };\n\n  return <div>{getCardContent()}</div>;\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport { device } from '../css/breakpoints';\n\nconst HeaderContainer = styled.div`\n  width: 100%;\n`;\n\nconst HeaderContent = styled.header`\n  margin: auto;\n  color: #ffffff;\n`;\n\nconst MainHeading = styled.h1`\n  margin-bottom: 0;\n  padding: 1.5rem 1rem;\n  font-size: clamp(2rem, 1.2rem + 1.3333vw, 3rem);\n`;\n\nconst Preamble = styled.p`\n  max-width: 520px;\n  margin: auto;\n  text-align: center;\n  color: #ffffff;\n  padding: 0 1rem;\n  font-size: clamp(1rem, 1.2rem + 1.3333vw, 1.5rem);\n`;\n\nexport const Header = () => {\n  return (\n    <HeaderContainer>\n      <HeaderContent>\n        <MainHeading>Random animal</MainHeading>\n        <Preamble>\n          Having a bad day? Click the buttons to get a pic, gif or video to\n          cheer yourself up.\n        </Preamble>\n      </HeaderContent>\n    </HeaderContainer>\n  );\n};\n","import React, { ReactNode } from 'react';\nimport styled from 'styled-components';\n\ntype Props = {\n  children: ReactNode;\n};\n\nconst Main = styled.main`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  position: relative;\n\n  &:after {\n    position: absolute;\n    content: '';\n    width: 100%;\n    height: 100%;\n    bottom: -50%;\n    left: 0;\n    background-repeat: no-repeat;\n    background-image: url('${process.env.PUBLIC_URL}/img/wave.svg');\n    background-size: cover;\n    background-position: top;\n  }\n`;\n\nexport const MainContent = (props: Props) => {\n  return <Main>{props.children}</Main>;\n};\n","export type AnimalResponse =\n  | {\n      response: 'success';\n      url: string;\n      tag: \"image\" | \"video\";\n    }\n  | { response: 'fail'; reason: string };\n\nexport type AnimalType = 'Cat' | 'Dog';\n\nexport const get = (animalType: AnimalType): Promise<AnimalResponse> => {\n  switch (animalType) {\n    case 'Cat':\n      return getCat();\n    case 'Dog':\n      return getDog();\n  }\n};\n\nconst getCat = (): Promise<AnimalResponse> =>\n  fetch('https://aws.random.cat/meow')\n    .then(response => response.json())\n    .then((data): AnimalResponse => succeededResponse(data.file))\n    .catch(() => responseFailed('Could not get cat'))\n\nconst getDog = (): Promise<AnimalResponse> =>\n  fetch('https://random.dog/woof.json')\n    .then(response => response.json())\n    .then((data): AnimalResponse => succeededResponse(data.url))\n    .catch(() => responseFailed('Could not get dog'));\n\nconst responseFailed = (reason: string): AnimalResponse => ({\n  response: 'fail',\n  reason,\n});\n\nconst succeededResponse = (url: string): AnimalResponse => ({\n  response: 'success',\n  url,\n  tag: url.endsWith('.mp4') ? \"video\" : \"image\"\n});\n","import React, { useReducer, useCallback, useEffect } from 'react';\nimport {\n  Action,\n  State,\n  initState,\n  reducer,\n  animalRequestedAction,\n  gotAnimalResponseAction,\n} from './State';\nimport { Card, Button, ButtonGroup, Header, MainContent } from './components';\nimport * as AnimalApi from './API/animal';\nimport styled from 'styled-components';\n\nexport const AppContext = React.createContext([\n  initState,\n  (() => {}) as React.Dispatch<Action>,\n] as [State, React.Dispatch<Action>]);\n\nconst TextContent = styled.div`\n  width: 100%;\n  background-color: #0f4a55;\n  padding-bottom: 1rem;\n`;\n\nexport const App = () => {\n  const [state, dispatch] = useReducer(reducer, initState);\n\n  useEffect(() => {\n    requestAnimal('Cat');\n  }, []);\n\n  const requestAnimal = useCallback((animalType: AnimalApi.AnimalType) => {\n    dispatch(animalRequestedAction);\n    AnimalApi.get(animalType).then(res => {\n      if (res.response === 'success') {\n        if (res.tag === 'video') {\n          dispatch(gotAnimalResponseAction(res));\n        } else {\n          // Preload image before dispatch\n          const img = new Image();\n          img.onload = () => dispatch(gotAnimalResponseAction(res));\n          img.onerror = () =>\n            dispatch(\n              gotAnimalResponseAction({\n                response: 'fail',\n                reason: 'Failed to fetch 🥎',\n              })\n            );\n\n          img.src = res.url;\n        }\n      } else {\n        dispatch(gotAnimalResponseAction(res));\n      }\n    });\n  }, []);\n\n  return (\n    <MainContent>\n      <TextContent>\n        <Header />\n        <ButtonGroup>\n          <Button\n            animalType=\"Cat\"\n            onClick={requestAnimal}\n            text=\"Cat pic plz 🐱\"\n          />\n          <Button\n            animalType=\"Dog\"\n            onClick={requestAnimal}\n            text=\"Dog pic plz 🐶\"\n          />\n        </ButtonGroup>\n      </TextContent>\n\n      <Card animal={state.currentAnimal} />\n    </MainContent>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyles = createGlobalStyle`\n  body {\n    margin: 0;\n    font-family: 'Overpass', sans-serif;\n    line-height: 1.8;\n    background-color: #16697a;\n  }\n\n  body, html, #root {\n    height: 100%;\n  }\n`;\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(\n  <>\n    <GlobalStyles />\n    <App />\n  </>,\n  rootElement\n);\n"],"sourceRoot":""}